package gio

/*
#include <gio/gio.h>
#include <gio/gunixoutputstream.h>
#include <gio/gunixinputstream.h>
#include <gio/gunixcredentialsmessage.h>
#include <gio/gunixmounts.h>
#include <gio/gdesktopappinfo.h>
#include <gio/gunixfdlist.h>
#include <gio/gunixsocketaddress.h>
#include <gio/gunixfdmessage.h>
#include <gio/gnetworking.h>
#include <gio/gunixconnection.h>
#include <stdlib.h>
*/
import "C"

var (
	// AppInfoCreateFlags
	APP_INFO_CREATE_NONE                          = C.GAppInfoCreateFlags(C.G_APP_INFO_CREATE_NONE)
	APP_INFO_CREATE_NEEDS_TERMINAL                = C.GAppInfoCreateFlags(C.G_APP_INFO_CREATE_NEEDS_TERMINAL)
	APP_INFO_CREATE_SUPPORTS_URIS                 = C.GAppInfoCreateFlags(C.G_APP_INFO_CREATE_SUPPORTS_URIS)
	APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = C.GAppInfoCreateFlags(C.G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION)

	// ApplicationFlags
	APPLICATION_FLAGS_NONE           = C.GApplicationFlags(C.G_APPLICATION_FLAGS_NONE)
	APPLICATION_IS_SERVICE           = C.GApplicationFlags(C.G_APPLICATION_IS_SERVICE)
	APPLICATION_IS_LAUNCHER          = C.GApplicationFlags(C.G_APPLICATION_IS_LAUNCHER)
	APPLICATION_HANDLES_OPEN         = C.GApplicationFlags(C.G_APPLICATION_HANDLES_OPEN)
	APPLICATION_HANDLES_COMMAND_LINE = C.GApplicationFlags(C.G_APPLICATION_HANDLES_COMMAND_LINE)
	APPLICATION_SEND_ENVIRONMENT     = C.GApplicationFlags(C.G_APPLICATION_SEND_ENVIRONMENT)
	APPLICATION_NON_UNIQUE           = C.GApplicationFlags(C.G_APPLICATION_NON_UNIQUE)

	// AskPasswordFlags
	ASK_PASSWORD_NEED_PASSWORD       = C.GAskPasswordFlags(C.G_ASK_PASSWORD_NEED_PASSWORD)
	ASK_PASSWORD_NEED_USERNAME       = C.GAskPasswordFlags(C.G_ASK_PASSWORD_NEED_USERNAME)
	ASK_PASSWORD_NEED_DOMAIN         = C.GAskPasswordFlags(C.G_ASK_PASSWORD_NEED_DOMAIN)
	ASK_PASSWORD_SAVING_SUPPORTED    = C.GAskPasswordFlags(C.G_ASK_PASSWORD_SAVING_SUPPORTED)
	ASK_PASSWORD_ANONYMOUS_SUPPORTED = C.GAskPasswordFlags(C.G_ASK_PASSWORD_ANONYMOUS_SUPPORTED)

	// BusNameOwnerFlags
	BUS_NAME_OWNER_FLAGS_NONE              = C.GBusNameOwnerFlags(C.G_BUS_NAME_OWNER_FLAGS_NONE)
	BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = C.GBusNameOwnerFlags(C.G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT)
	BUS_NAME_OWNER_FLAGS_REPLACE           = C.GBusNameOwnerFlags(C.G_BUS_NAME_OWNER_FLAGS_REPLACE)

	// BusNameWatcherFlags
	BUS_NAME_WATCHER_FLAGS_NONE       = C.GBusNameWatcherFlags(C.G_BUS_NAME_WATCHER_FLAGS_NONE)
	BUS_NAME_WATCHER_FLAGS_AUTO_START = C.GBusNameWatcherFlags(C.G_BUS_NAME_WATCHER_FLAGS_AUTO_START)

	// ConverterFlags
	CONVERTER_NO_FLAGS     = C.GConverterFlags(C.G_CONVERTER_NO_FLAGS)
	CONVERTER_INPUT_AT_END = C.GConverterFlags(C.G_CONVERTER_INPUT_AT_END)
	CONVERTER_FLUSH        = C.GConverterFlags(C.G_CONVERTER_FLUSH)

	// DBusCallFlags
	DBUS_CALL_FLAGS_NONE          = C.GDBusCallFlags(C.G_DBUS_CALL_FLAGS_NONE)
	DBUS_CALL_FLAGS_NO_AUTO_START = C.GDBusCallFlags(C.G_DBUS_CALL_FLAGS_NO_AUTO_START)

	// DBusCapabilityFlags
	DBUS_CAPABILITY_FLAGS_NONE            = C.GDBusCapabilityFlags(C.G_DBUS_CAPABILITY_FLAGS_NONE)
	DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = C.GDBusCapabilityFlags(C.G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING)

	// DBusConnectionFlags
	DBUS_CONNECTION_FLAGS_NONE                           = C.GDBusConnectionFlags(C.G_DBUS_CONNECTION_FLAGS_NONE)
	DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT          = C.GDBusConnectionFlags(C.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT)
	DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER          = C.GDBusConnectionFlags(C.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER)
	DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = C.GDBusConnectionFlags(C.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS)
	DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION         = C.GDBusConnectionFlags(C.G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION)
	DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING       = C.GDBusConnectionFlags(C.G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING)

	// DBusInterfaceSkeletonFlags
	DBUS_INTERFACE_SKELETON_FLAGS_NONE                                = C.GDBusInterfaceSkeletonFlags(C.G_DBUS_INTERFACE_SKELETON_FLAGS_NONE)
	DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = C.GDBusInterfaceSkeletonFlags(C.G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD)

	// DBusMessageFlags
	DBUS_MESSAGE_FLAGS_NONE              = C.GDBusMessageFlags(C.G_DBUS_MESSAGE_FLAGS_NONE)
	DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = C.GDBusMessageFlags(C.G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED)
	DBUS_MESSAGE_FLAGS_NO_AUTO_START     = C.GDBusMessageFlags(C.G_DBUS_MESSAGE_FLAGS_NO_AUTO_START)

	// DBusObjectManagerClientFlags
	DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE              = C.GDBusObjectManagerClientFlags(C.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE)
	DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = C.GDBusObjectManagerClientFlags(C.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START)

	// DBusPropertyInfoFlags
	DBUS_PROPERTY_INFO_FLAGS_NONE     = C.GDBusPropertyInfoFlags(C.G_DBUS_PROPERTY_INFO_FLAGS_NONE)
	DBUS_PROPERTY_INFO_FLAGS_READABLE = C.GDBusPropertyInfoFlags(C.G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
	DBUS_PROPERTY_INFO_FLAGS_WRITABLE = C.GDBusPropertyInfoFlags(C.G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE)

	// DBusProxyFlags
	DBUS_PROXY_FLAGS_NONE                              = C.GDBusProxyFlags(C.G_DBUS_PROXY_FLAGS_NONE)
	DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES            = C.GDBusProxyFlags(C.G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES)
	DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS            = C.GDBusProxyFlags(C.G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS)
	DBUS_PROXY_FLAGS_DO_NOT_AUTO_START                 = C.GDBusProxyFlags(C.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START)
	DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES        = C.GDBusProxyFlags(C.G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES)
	DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = C.GDBusProxyFlags(C.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION)

	// DBusSendMessageFlags
	DBUS_SEND_MESSAGE_FLAGS_NONE            = C.GDBusSendMessageFlags(C.G_DBUS_SEND_MESSAGE_FLAGS_NONE)
	DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = C.GDBusSendMessageFlags(C.G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL)

	// DBusServerFlags
	DBUS_SERVER_FLAGS_NONE                           = C.GDBusServerFlags(C.G_DBUS_SERVER_FLAGS_NONE)
	DBUS_SERVER_FLAGS_RUN_IN_THREAD                  = C.GDBusServerFlags(C.G_DBUS_SERVER_FLAGS_RUN_IN_THREAD)
	DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = C.GDBusServerFlags(C.G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS)

	// DBusSignalFlags
	DBUS_SIGNAL_FLAGS_NONE                 = C.GDBusSignalFlags(C.G_DBUS_SIGNAL_FLAGS_NONE)
	DBUS_SIGNAL_FLAGS_NO_MATCH_RULE        = C.GDBusSignalFlags(C.G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE)
	DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = C.GDBusSignalFlags(C.G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE)
	DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH      = C.GDBusSignalFlags(C.G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH)

	// DBusSubtreeFlags
	DBUS_SUBTREE_FLAGS_NONE                           = C.GDBusSubtreeFlags(C.G_DBUS_SUBTREE_FLAGS_NONE)
	DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = C.GDBusSubtreeFlags(C.G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES)

	// DriveStartFlags
	DRIVE_START_NONE = C.GDriveStartFlags(C.G_DRIVE_START_NONE)

	// FileAttributeInfoFlags
	FILE_ATTRIBUTE_INFO_NONE            = C.GFileAttributeInfoFlags(C.G_FILE_ATTRIBUTE_INFO_NONE)
	FILE_ATTRIBUTE_INFO_COPY_WITH_FILE  = C.GFileAttributeInfoFlags(C.G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE)
	FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = C.GFileAttributeInfoFlags(C.G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED)

	// FileCopyFlags
	FILE_COPY_NONE                 = C.GFileCopyFlags(C.G_FILE_COPY_NONE)
	FILE_COPY_OVERWRITE            = C.GFileCopyFlags(C.G_FILE_COPY_OVERWRITE)
	FILE_COPY_BACKUP               = C.GFileCopyFlags(C.G_FILE_COPY_BACKUP)
	FILE_COPY_NOFOLLOW_SYMLINKS    = C.GFileCopyFlags(C.G_FILE_COPY_NOFOLLOW_SYMLINKS)
	FILE_COPY_ALL_METADATA         = C.GFileCopyFlags(C.G_FILE_COPY_ALL_METADATA)
	FILE_COPY_NO_FALLBACK_FOR_MOVE = C.GFileCopyFlags(C.G_FILE_COPY_NO_FALLBACK_FOR_MOVE)
	FILE_COPY_TARGET_DEFAULT_PERMS = C.GFileCopyFlags(C.G_FILE_COPY_TARGET_DEFAULT_PERMS)

	// FileCreateFlags
	FILE_CREATE_NONE                = C.GFileCreateFlags(C.G_FILE_CREATE_NONE)
	FILE_CREATE_PRIVATE             = C.GFileCreateFlags(C.G_FILE_CREATE_PRIVATE)
	FILE_CREATE_REPLACE_DESTINATION = C.GFileCreateFlags(C.G_FILE_CREATE_REPLACE_DESTINATION)

	// FileMeasureFlags
	FILE_MEASURE_NONE             = C.GFileMeasureFlags(C.G_FILE_MEASURE_NONE)
	FILE_MEASURE_REPORT_ANY_ERROR = C.GFileMeasureFlags(C.G_FILE_MEASURE_REPORT_ANY_ERROR)
	FILE_MEASURE_APPARENT_SIZE    = C.GFileMeasureFlags(C.G_FILE_MEASURE_APPARENT_SIZE)
	FILE_MEASURE_NO_XDEV          = C.GFileMeasureFlags(C.G_FILE_MEASURE_NO_XDEV)

	// FileMonitorFlags
	FILE_MONITOR_NONE             = C.GFileMonitorFlags(C.G_FILE_MONITOR_NONE)
	FILE_MONITOR_WATCH_MOUNTS     = C.GFileMonitorFlags(C.G_FILE_MONITOR_WATCH_MOUNTS)
	FILE_MONITOR_SEND_MOVED       = C.GFileMonitorFlags(C.G_FILE_MONITOR_SEND_MOVED)
	FILE_MONITOR_WATCH_HARD_LINKS = C.GFileMonitorFlags(C.G_FILE_MONITOR_WATCH_HARD_LINKS)

	// FileQueryInfoFlags
	FILE_QUERY_INFO_NONE              = C.GFileQueryInfoFlags(C.G_FILE_QUERY_INFO_NONE)
	FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = C.GFileQueryInfoFlags(C.G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS)

	// IOStreamSpliceFlags
	IO_STREAM_SPLICE_NONE          = C.GIOStreamSpliceFlags(C.G_IO_STREAM_SPLICE_NONE)
	IO_STREAM_SPLICE_CLOSE_STREAM1 = C.GIOStreamSpliceFlags(C.G_IO_STREAM_SPLICE_CLOSE_STREAM1)
	IO_STREAM_SPLICE_CLOSE_STREAM2 = C.GIOStreamSpliceFlags(C.G_IO_STREAM_SPLICE_CLOSE_STREAM2)
	IO_STREAM_SPLICE_WAIT_FOR_BOTH = C.GIOStreamSpliceFlags(C.G_IO_STREAM_SPLICE_WAIT_FOR_BOTH)

	// MountMountFlags
	MOUNT_MOUNT_NONE = C.GMountMountFlags(C.G_MOUNT_MOUNT_NONE)

	// MountUnmountFlags
	MOUNT_UNMOUNT_NONE  = C.GMountUnmountFlags(C.G_MOUNT_UNMOUNT_NONE)
	MOUNT_UNMOUNT_FORCE = C.GMountUnmountFlags(C.G_MOUNT_UNMOUNT_FORCE)

	// OutputStreamSpliceFlags
	OUTPUT_STREAM_SPLICE_NONE         = C.GOutputStreamSpliceFlags(C.G_OUTPUT_STREAM_SPLICE_NONE)
	OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = C.GOutputStreamSpliceFlags(C.G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE)
	OUTPUT_STREAM_SPLICE_CLOSE_TARGET = C.GOutputStreamSpliceFlags(C.G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET)

	// ResourceFlags
	RESOURCE_FLAGS_NONE       = C.GResourceFlags(C.G_RESOURCE_FLAGS_NONE)
	RESOURCE_FLAGS_COMPRESSED = C.GResourceFlags(C.G_RESOURCE_FLAGS_COMPRESSED)

	// ResourceLookupFlags
	RESOURCE_LOOKUP_FLAGS_NONE = C.GResourceLookupFlags(C.G_RESOURCE_LOOKUP_FLAGS_NONE)

	// SettingsBindFlags
	SETTINGS_BIND_DEFAULT        = C.GSettingsBindFlags(C.G_SETTINGS_BIND_DEFAULT)
	SETTINGS_BIND_GET            = C.GSettingsBindFlags(C.G_SETTINGS_BIND_GET)
	SETTINGS_BIND_SET            = C.GSettingsBindFlags(C.G_SETTINGS_BIND_SET)
	SETTINGS_BIND_NO_SENSITIVITY = C.GSettingsBindFlags(C.G_SETTINGS_BIND_NO_SENSITIVITY)
	SETTINGS_BIND_GET_NO_CHANGES = C.GSettingsBindFlags(C.G_SETTINGS_BIND_GET_NO_CHANGES)
	SETTINGS_BIND_INVERT_BOOLEAN = C.GSettingsBindFlags(C.G_SETTINGS_BIND_INVERT_BOOLEAN)

	// SocketMsgFlags
	SOCKET_MSG_NONE      = C.GSocketMsgFlags(C.G_SOCKET_MSG_NONE)
	SOCKET_MSG_OOB       = C.GSocketMsgFlags(C.G_SOCKET_MSG_OOB)
	SOCKET_MSG_PEEK      = C.GSocketMsgFlags(C.G_SOCKET_MSG_PEEK)
	SOCKET_MSG_DONTROUTE = C.GSocketMsgFlags(C.G_SOCKET_MSG_DONTROUTE)

	// SubprocessFlags
	SUBPROCESS_FLAGS_NONE           = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_NONE)
	SUBPROCESS_FLAGS_STDIN_PIPE     = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDIN_PIPE)
	SUBPROCESS_FLAGS_STDIN_INHERIT  = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDIN_INHERIT)
	SUBPROCESS_FLAGS_STDOUT_PIPE    = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDOUT_PIPE)
	SUBPROCESS_FLAGS_STDOUT_SILENCE = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDOUT_SILENCE)
	SUBPROCESS_FLAGS_STDERR_PIPE    = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDERR_PIPE)
	SUBPROCESS_FLAGS_STDERR_SILENCE = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDERR_SILENCE)
	SUBPROCESS_FLAGS_STDERR_MERGE   = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_STDERR_MERGE)
	SUBPROCESS_FLAGS_INHERIT_FDS    = C.GSubprocessFlags(C.G_SUBPROCESS_FLAGS_INHERIT_FDS)

	// TestDBusFlags
	TEST_DBUS_NONE = C.GTestDBusFlags(C.G_TEST_DBUS_NONE)

	// TlsCertificateFlags
	TLS_CERTIFICATE_UNKNOWN_CA    = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_UNKNOWN_CA)
	TLS_CERTIFICATE_BAD_IDENTITY  = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_BAD_IDENTITY)
	TLS_CERTIFICATE_NOT_ACTIVATED = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_NOT_ACTIVATED)
	TLS_CERTIFICATE_EXPIRED       = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_EXPIRED)
	TLS_CERTIFICATE_REVOKED       = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_REVOKED)
	TLS_CERTIFICATE_INSECURE      = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_INSECURE)
	TLS_CERTIFICATE_GENERIC_ERROR = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_GENERIC_ERROR)
	TLS_CERTIFICATE_VALIDATE_ALL  = C.GTlsCertificateFlags(C.G_TLS_CERTIFICATE_VALIDATE_ALL)

	// TlsDatabaseVerifyFlags
	TLS_DATABASE_VERIFY_NONE = C.GTlsDatabaseVerifyFlags(C.G_TLS_DATABASE_VERIFY_NONE)

	// TlsPasswordFlags
	TLS_PASSWORD_NONE       = C.GTlsPasswordFlags(C.G_TLS_PASSWORD_NONE)
	TLS_PASSWORD_RETRY      = C.GTlsPasswordFlags(C.G_TLS_PASSWORD_RETRY)
	TLS_PASSWORD_MANY_TRIES = C.GTlsPasswordFlags(C.G_TLS_PASSWORD_MANY_TRIES)
	TLS_PASSWORD_FINAL_TRY  = C.GTlsPasswordFlags(C.G_TLS_PASSWORD_FINAL_TRY)
)
